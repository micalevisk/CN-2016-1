//
//	[lagrange.c]
//	Created by Micael Levi on 09/19/2016
//	Copyright (c) 2016 mllc@icomp.ufam.edu.br; All rights reserved.
//	https://github.com/micalevisk/CompNumerica/tree/master/interpolacaoNumerica/polinomioDeLagrange
//
//	Calcula uma função interpoladora a partir de uma tabela de pontos usando o polinômio de Lagrange.
//
//	USO:
//	COMPILAR NA LINHA DE COMANDO:
//	(1)	$	gcc -std=gnu11 -D AUTO -o polinomioLagrange lagrange.c
//	(2)	$	gcc -std=gnu11 -o polinomioLagrange lagrange.c
//
//	EXECUTAR NA LINHA DE COMANDO:
//	(1.1)	$	./polinomioLagrange < arqEntradas
//	(2.1)	$	./polinomioLagrange
//
//	O 'arqEntradas' DEVE SER UM ARQUIVO TEXTO QUE OBEDECE AO SEGUINTE FORMATO:
//	x
//	N
//	X0 Y0
//	X1 Y1
//	...
//	Xn-1 Yn-1
//
//	ONDE, 'x' é o ponto interpolado, 'N' É UM NÚMERO NATURAL QUE INDICA A QUANTIDAE DE PONTOS A SEREM LIDOS A SEGUIR.
//
//	NOS DOIS CASOS, PODE-SE AINDA DEFINIR UMA OUTRA PRECISÃO (SENDO 0.001 A PADRÃO)
//	AO COMPILAR NA LINHA DE COMANDO:
//	(a)	$	gcc -D PRECISAO -o polinomioLagrange lagrange.c
//	(b)	$	gcc -D PRECISAO=p -o polinomioLagrange lagrange.c
//	ONDE "p" É UM NATURAL DE 0 A 6 QUE INDICA O NÚMERO DE CASAS DECIMAIS.
//
//	SAÍDA:
//	(a ordenada do ponto interpolado)
//
//	DIRETIVAS DE PRE-PROCESSAMENTO VALIDAS:
//	PRECISAO	(alterar precisao padrao)
//	MOSTRAR	(exibir o polinomio interpolador)
//	AUTO	(nao mostrar instrucoes; para leituras redirecionadas)
//

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

typedef struct{
	float x, y;
}Tupla;

Tupla* tabela = NULL;
unsigned nPontos = 0;
float X, Y;

#define X(i) tabela[i].x
#define Y(i) tabela[i].y


short lerValoresParaTabela(Tupla* tabela, unsigned qtdPontos){
	unsigned i;

	#ifndef AUTO
		printf(">> Digite no formato \"x f(x)\" (sem aspas) seguido de um ENTER a cada Xi\n");
		printf("i\n");
	#endif

	for(i=0; i < qtdPontos; ++i){
		#ifndef AUTO
			printf("%u: ", i);
		#endif
		if( scanf("%f %f", &tabela[i].x, &tabela[i].y) != 2 ) return 0;
	}
	return (i == qtdPontos);
}





int main(){


	/*****************************************************************************/
	char* FORMATO = calloc(11, sizeof(char));
	char* FORMATO_NUMERADOR = calloc(22, sizeof(char));
	char* FORMATO_DENOMINADOR = calloc(22, sizeof(char));

	#ifdef PRECISAO
		char PRECISAO_str[2];
		if((PRECISAO >= 0) && (PRECISAO <= 6)) sprintf(PRECISAO_str, "%d", PRECISAO);
		else sprintf(PRECISAO_str, "%hu", 6);
		sprintf(FORMATO, "%%+.%sf", PRECISAO_str);
		sprintf(FORMATO_NUMERADOR, " * (x %%c %%.%sf)", PRECISAO_str);
		sprintf(FORMATO_DENOMINADOR, "/(%%+.%sf %%c %%.%sf)", PRECISAO_str, PRECISAO_str);
	#else
		strcpy(FORMATO,"%+.3f"); // precisão padrão é 3.
		strcpy(FORMATO_NUMERADOR," * (x %c %.3f)"); // precisão padrão é 3.
		strcpy(FORMATO_DENOMINADOR,"/(%+.3f %c %.3f)"); // precisão padrão é 3.
	#endif
	/*****************************************************************************/


	#ifndef AUTO
		printf(">> Digite a abcissa (x) do ponto interpolado: ");
	#endif
	scanf("%f", &X);

	#ifndef AUTO
		printf(">> Digite a quantidade de pontos (numero natural): ");
	#endif
	scanf("%u", &nPontos);

	if(!nPontos) return 1;

	tabela = malloc(sizeof(Tupla) * nPontos);
	if(!lerValoresParaTabela(tabela, nPontos)) return 1;

	#ifdef MOSTRAR
		printf("\n P%u(x) = \n", nPontos-1);
	#endif

	Y = 0;
	for(unsigned j=0; j < nPontos; ++j){

		#ifdef MOSTRAR
			printf("\t");
			printf(FORMATO, Y(j));
		#endif

		float produtorio = 1;
		for(unsigned i=0; i < nPontos; ++i){
			if(i != j){

				#ifdef MOSTRAR
					bool ispositive = X(i) >= 0;
					printf(FORMATO_NUMERADOR, (ispositive ? '-' : '+'), (ispositive ? X(i) : (X(i)*-1)));
					printf(FORMATO_DENOMINADOR, X(j), (ispositive ? '-' : '+'), (ispositive ? X(i) : (X(i)*-1)));
				#endif

				produtorio *= ( (X - X(i)) / (X(j) - X(i)) );
			}
		}
		Y = Y + produtorio * Y(j);

		#ifdef MOSTRAR
			printf("\n");
		#endif
	}

	#ifdef MOSTRAR
		printf("\n");
	#endif
	printf("P%u(", nPontos-1); printf(FORMATO, X); printf(") = ");
	printf(FORMATO, Y);
	printf("\n");


}
